import java.util.*;
import java.util.stream.Collectors;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        //orders
        Map<String, Integer> orders = new LinkedHashMap<>(3);
        for (String s : inputs) {
            orders.put(s.split("x")[0].trim(), Integer.valueOf(s.split("x")[1].trim()));
        }
        //totalCosts according to promotion
        double[] totalCost = new double[salesPromotionRepository.findAll().size()];
        Map<String, Item> items = itemRepository.findAll()
                .stream().collect(Collectors.toMap(Item::getId, item -> item));
        double sum;
        double initCost = 0.0;
        for (int i = 0; i < salesPromotionRepository.findAll().size(); i++) {
            sum = 0.0;
            if (i == 0) {
                //the first promotion
                for (Map.Entry<String, Integer> entry : orders.entrySet()) {
                    String itemId = entry.getKey();
                    Integer itemCount = entry.getValue();
                    sum += items.get(itemId).getPrice() * itemCount;
                }
                if (sum >= 30) {
                    sum -= 6;
                }
                totalCost[i] = sum;
            } else {
                for (Map.Entry<String, Integer> entry : orders.entrySet()) {
                    String itemId = entry.getKey();
                    Integer itemCount = entry.getValue();
                    sum += items.get(itemId).getPrice() * itemCount;
                    if (salesPromotionRepository.findAll().get(i).getRelatedItems().contains(itemId)) {
                        sum -= items.get(itemId).getPrice() * itemCount / 2.0;
                    }
                }
                totalCost[i] = sum;
            }
        }
        int minIndex = 0;
        for (int i = 1; i < totalCost.length; i++) {
            if (totalCost[i] < totalCost[minIndex]) {
                minIndex = i;
            }
        }
        StringBuilder promotion = new StringBuilder("============= Order details =============\n");

        for (Map.Entry<String, Integer> entry : orders.entrySet()) {
            String itemId = entry.getKey();
            Integer itemCount = entry.getValue();
            double cost = items.get(itemId).getPrice() * itemCount;
            initCost += cost;
            promotion.append(items.get(itemId).getName())
                    .append(" x ").append(itemCount)
                    .append(" = ").append((int)cost).append(" yuan\n");
        }
        promotion.append("-----------------------------------\n");
        if(initCost > totalCost[minIndex]) {
            promotion.append("Promotion used:\n");
            SalesPromotion minPromotion = salesPromotionRepository.findAll().get(minIndex);
            promotion.append(minPromotion.getDisplayName());
            for (int i = 0, n; i < (n = minPromotion.getRelatedItems().size()); i++) {
                if (i == 0) {
                    promotion.append(" (").append(items.get(minPromotion.getRelatedItems().get(i)).getName()).append("£¬");
                } else if (i == n - 1) {
                    promotion.append(items.get(minPromotion.getRelatedItems().get(i)).getName())
                            .append(")");
                } else {
                    promotion.append(items.get(minPromotion.getRelatedItems().get(i)).getName())
                            .append("£¬");
                }
            }
            promotion.append("£¬saving ").append((int) (initCost - totalCost[minIndex])).append(" yuan\n")
                    .append("-----------------------------------\n");
        }
        promotion.append("Total£º").append((int)totalCost[minIndex]).append(" yuan\n")
                .append("===================================");
        System.out.println(promotion);
        return String.valueOf(promotion);
    }
}
